name: Repo Scan Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  repo-scan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write      # allows authentication to Endor Labs using Actions OIDC JWT Token
      contents: read       # allows this job to clone org repos
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Replace with your actual secret
      ENDOR_API_CREDENTIALS_KEY: ${{ secrets.ENDOR_API_CREDENTIALS_KEY }}
      ENDOR_API_CREDENTIALS_SECRET: ${{ secrets.ENDOR_API_CREDENTIALS_SECRET }}
      ENDOR_NAMESPACE: 'arsalan-learn'
      ENDOR_SCAN_SUMMARY_OUTPUT_TYPE: 'summary'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.YOUR_GITHUB_PERSONAL_TOKEN }}

      - name: Download Endorctl
        run: |
            curl https://api.endorlabs.com/download/latest/endorctl_linux_amd64 -o endorctl;
            echo "$(curl -s https://api.endorlabs.com/sha/latest/endorctl_linux_amd64)  endorctl" | sha256sum -c;
            if [ $? -ne 0 ]; then 
             echo "Integrity check failed"; 
             exit 1;
            fi
            chmod +x ./endorctl 
      - name: Read repo list and scan one by one
        shell: bash
        run: |
          cat repo_list.txt | while read CLONE_URL; do
            echo "Processing repository: $CLONE_URL"
            if (git clone "${CLONE_URL}" "project"); then
              >&2 echo "Cloned '${CLONE_URL}' successfully using bare git"
            else
              >&2 echo "trying gh instead..."
              if ! (gh repo clone "${CLONE_URL}" "project"); then
                echo "::error::unable to clone '${CLONE_URL}' with any supported method"
                continue # Skip to the next repository in case of a failure
              fi
            fi
            cd project
            #add any build steps that are needed here
            if [ -f defaults.txt ]; then
                cp defaults.txt requirements.txt
                python -m pip install --upgrade pip
                pip install -r requirements.txt
              else
                echo "No defaults.txt found, skipping dependency installation."
              fi
            cd ..
            ./endorctl scan --path=project  || echo "Endorctl scan failed for $CLONE_URL, continuing..."
            rm -rf project    
          done
